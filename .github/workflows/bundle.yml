name: bundle
on:
  #schedule:
  # - cron: "10 0 * * *"
  workflow_dispatch:
    inputs:
      force_fetch:
        description: "force_fetch: if non-empty, rebuild even if there are no PoE content changes"
        required: false
        default: ''

jobs:
  fetch:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    outputs:
      STEAM_DEPOT_INFO_DIFF: ${{ steps.steamdiff.outputs.STEAM_DEPOT_INFO_DIFF }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      # https://github.com/marketplace/actions/setup-python
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
      - uses: actions/setup-node@v1
        with:
          node-version: 12.x

      # fetch poe content, if it's changed
      - name: Auth
        env:
          STEAMPULL_USER: ${{ secrets.STEAMPULL_USER }}
          STEAMPULL_PASSWD: ${{ secrets.STEAMPULL_PASSWD }}
          STEAMPULL_SECRET: ${{ secrets.STEAMPULL_SECRET }}
        # https://unix.stackexchange.com/questions/82598/how-do-i-write-a-retry-logic-in-script-to-keep-retrying-to-run-it-upto-5-times
        run: |
          for i in {1..3}; do
            yarn fetch:auth && break || sleep 15;
          done
      - if: ${{ github.event.inputs.force_fetch }}
        run: echo "FORCE_FETCH=1" >> $GITHUB_ENV
      - run: yarn fetch dat/v1
      - run: |
          echo 'STEAM_DEPOT_INFO_DIFF<<__EOF__' >> $GITHUB_ENV
          (diff assets/content/info-old.txt assets/content/info.txt || true) >> $GITHUB_ENV
          echo '__EOF__' >> $GITHUB_ENV
          cat $GITHUB_ENV
      - id: steamdiff
        # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idoutputs
        run: echo "::set-output name=STEAM_DEPOT_INFO_DIFF::$STEAM_DEPOT_INFO_DIFF"
      # https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts
      - if: ${{ env.STEAM_DEPOT_INFO_DIFF != '' }}
        run: tar -czf assets.tar.gz assets/
      - if: ${{ env.STEAM_DEPOT_INFO_DIFF != '' }}
        uses: actions/upload-artifact@v2
        with:
          name: assets
          path: assets.tar.gz
          retention-days: 1

  dat:
    needs: fetch
    if: ${{ needs.fetch.outputs.STEAM_DEPOT_INFO_DIFF != '' }}
    # windows must run this, not ubuntu, as bun_extract_file.exe is only built for windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
      - uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - run: yarn install --frozen-lockfile
      - uses: actions/download-artifact@v2
        with:
          name: assets
      - run: rm -rf assets && tar xfz assets.tar.gz

      # build and deploy dat/extract_bun data
      - env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: yarn distpush:dat

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest-dat"
          prerelease: true
          title: "Latest Dat Build"
          files: |
            build/version/version.txt
            build/version/version.json
            build/dat/dist/poedat-dat-*.*.tar.gz

  pypoe:
    needs: fetch
    if: ${{ needs.fetch.outputs.STEAM_DEPOT_INFO_DIFF != '' }}
    # windows must run this, not ubuntu, as bun_extract_file.exe is only built for windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-nodejs
      - uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - run: yarn install --frozen-lockfile
      - uses: actions/download-artifact@v2
        with:
          name: assets
      - run: rm -rf assets && tar xfz assets.tar.gz

      # build and deploy pypoe data
      - env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: yarn distpush:pypoe

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest-pypoe"
          prerelease: true
          title: "Latest PyPoE Build"
          files: |
            build/version/version.txt
            build/version/version.json
            build/pypoe/dist/poedat-pypoe-*.*.tar.gz
