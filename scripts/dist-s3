#!/usr/bin/env bash
# set -x
set -euo pipefail
cd "`dirname "$0"`/.."

ASSETS_EXE_PATH="`pwd`/assets/exe/depot"
ASSETS_PATH="`pwd`/assets/content/depot"
STRINGS_EXE="`pwd`/build/strings/strings.exe"

main() {
  build-version
  POE_VERSION="`cat "build/latest/version.txt"`"

  build-latest-dat
  #build-pypoe
  ./scripts/dist-passive-skill-tree.js

  dist-raw
  #dist-s3
  time dist-s3
  bash ./scripts/dist-s3-versions
}

dist-s3() {
  SRC="dist/raw/$POE_VERSION"
  DST="dist/s3"
  INDEX="$DST/versions/$POE_VERSION/index.json"
  COUNT=`find "$SRC" -type f | wc -l`
  rm -f "$INDEX"
  mkdir -p "`dirname "$INDEX"`"
  echo "{" >> "$INDEX"
  i=0
  for f in `find "$SRC" -type f -printf "%P\n"`; do
    HASH=`sha256sum "$SRC/$f" | awk '{print $1}'`
    DST_BY_HASH="$DST/by-sha256/$HASH/`basename $f`"
    mkdir -p "`dirname "$DST_BY_HASH"`"
    cp -f "$SRC/$f" "$DST_BY_HASH"

    echo "  \"$f\": \"$HASH\"," >> "$INDEX"

    i=$((i+1))
    [ $((i % 10)) == 0 ] && echo "$i/$COUNT s3 files hashed..."
  done
  sed -i '$ s/,$//' "$INDEX"    # remove the trailing comma. https://stackoverflow.com/questions/27305177/how-can-i-remove-the-last-character-of-a-file-in-unix
  echo "}" >> "$INDEX"
  echo "all s3 files hashed"

  cp assets/content/info.txt "$DST/depot-info.txt"
}

dist-raw() {
  rm -rf "dist/raw/$POE_VERSION"
  mkdir -p dist/raw
  cp -r build/latest "dist/raw/$POE_VERSION"
  # cp -r "build/pypoe/dat" "dist/raw/$POE_VERSION/pypoe"

  tar -cvzf "dist/raw/poedat-$POE_VERSION.tar.gz" "dist/raw/$POE_VERSION"
}

build-pypoe() {
  build-ooz
  (cd third-party/PyPoE && pip install -e .[cli-full])

  PYPOE_TARGET="`pwd`/build/pypoe/pypoe-$POE_VERSION.min.json"
  mkdir -p build/pypoe/

  pypoe_exporter config set ggpk_path $ASSETS_PATH
  # `cd`: pypoe insists on having libooz.dll in the current directory
  (cd build/ooz && pypoe_exporter dat json "$PYPOE_TARGET")
  node ./scripts/dist-pypoe-split.js "$PYPOE_TARGET" build/pypoe/dat

  for lang in `node --eval="require('./scripts/lang.json').map(l => console.log(l))"`; do
    PYPOE_TARGET_LANG="`pwd`/build/pypoe/pypoe-$POE_VERSION-$lang.min.json"
    (cd build/ooz && pypoe_exporter dat json --language "$lang" "$PYPOE_TARGET_LANG")
    node ./scripts/dist-pypoe-split.js "$PYPOE_TARGET_LANG" "build/pypoe/dat/$lang"
  done
}

build-ooz() {
  mkdir -p build/ooz

  # `--location` follows 30X redirects
  [ -f build/ooz/bun_extract_file.exe ] || curl --location https://github.com/erosson/ooz/releases/download/latest/bun_extract_file.exe --output build/ooz/bun_extract_file.exe
  [ -f build/ooz/libbun.dll ] || curl --location https://github.com/erosson/ooz/releases/download/latest/libbun.dll --output build/ooz/libbun.dll
  [ -f build/ooz/ooz.exe ] || curl --location https://github.com/erosson/ooz/releases/download/latest/ooz.exe --output build/ooz/ooz.exe
  [ -f build/ooz/libooz.dll ] || curl --location https://github.com/erosson/ooz/releases/download/latest/libooz.dll --output build/ooz/libooz.dll
  PATH=$PATH:`pwd`/build/ooz
}

build-latest-dat() {
  build-ooz

  mkdir -p build/latest
  bun_extract_file list-files ./assets/content/depot | grep ".dat64" > build/latest/index.txt
  bun_extract_file extract-files --regex ./assets/content/depot build/latest ".*\.dat64$"

  ## to save space, keep only the language files that differ from english
  #for lang in `node --eval="require('./scripts/lang.json').map(l => console.log(l))"`; do
  #  echo "deduping ./build/latest/Data/$lang..."
  #  for f in `ls ./build/latest/Data/$lang`; do
  #    diff --brief --ignore-trailing-space "./build/latest/Data/$f" "./build/latest/Data/$lang/$f" >/dev/null && rm "./build/latest/Data/$lang/$f" || true
  #  done
  #done
}

build-version() {
  mkdir -p build/strings
  [ ! -f "$STRINGS_EXE" ] && unzip third-party/Strings.zip -d build/strings
  "$STRINGS_EXE" -accepteula 2>/dev/null || true

  mkdir -p build/latest
  POE_VERSION="`"$STRINGS_EXE" "$ASSETS_EXE_PATH/PathOfExileSteam.exe" | grep release/tags/ | sed -e "s_release/tags/__"`"
  if [ -z $POE_VERSION ]; then
    echo "Failed to find poe version"
    exit 1
  fi
  echo "${POE_VERSION}" | tee "build/latest/version.txt"
  echo "{\"version\":\"${POE_VERSION}\"}" > "build/latest/version.json"
}

main "$@"
