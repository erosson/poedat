#!/usr/bin/env bash
# set -x
set -euo pipefail
cd "`dirname "$0"`/.."

ASSETS_EXE_PATH="`pwd`/assets/exe/depot"
ASSETS_PATH="`pwd`/assets/content/depot"
STRINGS_EXE="`pwd`/build/strings/strings.exe"

main() {
  build-version
  build-latest-dat
  build-pypoe
  ./scripts/dist-passive-skill-tree.js

  dist-latest
  dist-www-index
}

dist-www-index() {
  # S3 doesn't have a builtin way to do directory listings, so generate static listings
  # https://stackoverflow.com/a/46383157/2782048
  # http://gnuwin32.sourceforge.net/packages/tree.htm
  TREE="`pwd`/third-party/tree/bin/tree"
  TMP="`pwd`/build/tmp-index.html"
  [ ! -f "$TREE" ] && unzip third-party/tree-*-bin.zip -d build/tree
  for d in `find dist -type d`; do
    cd $d
    rm -f ./index.html
    $TREE -H . -L 1 --noreport --charset utf-8 > $TMP
    mv $TMP ./index.html
    cd -
  done
}

dist-latest() {
  rm -rf "dist/$POE_VERSION" dist/latest
  mkdir -p dist/latest
  cp -r build/latest "dist/$POE_VERSION"
  cp build/latest/version* dist/latest
  cp assets/content/info.txt dist/depot-info.txt

  tar -cvzf "dist/poedat-latest.tar.gz" "dist/$POE_VERSION"
  cp -f "dist/poedat-latest.tar.gz" "dist/poedat-$POE_VERSION.tar.gz"
}

build-pypoe() {
  build-ooz
  (cd third-party/PyPoE && pip install -e .[cli-full])

  PYPOE_TARGET="`pwd`/build/pypoe/pypoe-$POE_VERSION.min.json"
  mkdir -p build/pypoe/

  cd build/ooz # pypoe insists on having libooz.dll in the current directory
  pypoe_exporter config set ggpk_path $ASSETS_PATH
  pypoe_exporter dat json "$PYPOE_TARGET"
  cd -
  node ./scripts/dist-pypoe-split.js "$PYPOE_TARGET" build/pypoe/dat
}

build-ooz() {
  mkdir -p build/ooz

  # `--location` follows 30X redirects
  [ -f build/ooz/bun_extract_file.exe ] || curl --location https://github.com/erosson/ooz/releases/download/latest/bun_extract_file.exe --output build/ooz/bun_extract_file.exe
  [ -f build/ooz/libbun.dll ] || curl --location https://github.com/erosson/ooz/releases/download/latest/libbun.dll --output build/ooz/libbun.dll
  [ -f build/ooz/ooz.exe ] || curl --location https://github.com/erosson/ooz/releases/download/latest/ooz.exe --output build/ooz/ooz.exe
  [ -f build/ooz/libooz.dll ] || curl --location https://github.com/erosson/ooz/releases/download/latest/libooz.dll --output build/ooz/libooz.dll
  PATH=$PATH:`pwd`/build/ooz
}

build-latest-dat() {
  build-ooz

  mkdir -p build/latest
  bun_extract_file list-files ./assets/content/depot | grep ".dat64" > build/latest/index.txt
  bun_extract_file extract-files --regex ./assets/content/depot build/latest ".*\.dat64$"

  ## to save space, keep only the language files that differ from english
  #for lang in `node --eval="require('./scripts/lang.json').map(l => console.log(l))"`; do
  #  echo "deduping ./build/latest/Data/$lang..."
  #  for f in `ls ./build/latest/Data/$lang`; do
  #    diff --brief --ignore-trailing-space "./build/latest/Data/$f" "./build/latest/Data/$lang/$f" >/dev/null && rm "./build/latest/Data/$lang/$f" || true
  #  done
  #done
}

build-version() {
  mkdir -p build/strings
  [ ! -f "$STRINGS_EXE" ] && unzip third-party/Strings.zip -d build/strings
  "$STRINGS_EXE" -accepteula 2>/dev/null || true

  mkdir -p build/latest
  POE_VERSION="`"$STRINGS_EXE" "$ASSETS_EXE_PATH/PathOfExileSteam.exe" | grep release/tags/ | sed -e "s_release/tags/__"`"
  if [ -z $POE_VERSION ]; then
    echo "Failed to find poe version"
    exit 1
  fi
  echo "${POE_VERSION}" | tee "build/latest/version.txt"
  echo "{\"version\":\"${POE_VERSION}\"}" > "build/latest/version.json"
}

main "$@"
